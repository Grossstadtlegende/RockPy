from unittest import TestCase
import RockPy
from RockPy.Packages.Mag.Measurement.Simulation.paleointensity import Fabian2001
import pandas as pd
import os.path
import numpy.testing as npt
import numpy as np


class TestFabian2001(TestCase):
    def setUp(self):

        self.models = {}
        for preset in Fabian2001.presets:
            self.models[preset] = Fabian2001(preset=preset)

    # def test_get_steps(self):
    #     self.fail()
    #
    # def test_cauchy(self):
    #     self.fail()
    #
    # def test_tau(self):
    #     self.fail()
    #
    def test_beta(self):
        # Leonhard 8b
        L8b_betas = [0.00584906, 0.0099002, 0.0140453, 0.0182868, 0.0226273, 0.0270694, 0.0316157, 0.036269, 0.0410321,
                     0.0459077, 0.0508989, 0.0560085, 0.0612395, 0.0665951, 0.0720783, 0.0776923, 0.0834403, 0.0893256,
                     0.0953514, 0.101521, 0.107838, 0.114305, 0.120926, 0.127705, 0.134644, 0.141747, 0.149018,
                     0.156458, 0.164073, 0.171865, 0.179836, 0.18799, 0.19633, 0.204858, 0.213577, 0.222489, 0.231595,
                     0.240898, 0.2504, 0.2601, 0.27, 0.2801, 0.2904, 0.300898, 0.311594, 0.322486, 0.333571, 0.344845,
                     0.356304, 0.367943, 0.379756, 0.391736, 0.403874, 0.416162, 0.428588, 0.441141, 0.453807, 0.466573,
                     0.479421, 0.492335, 0.505294, 0.518279, 0.531267, 0.544234, 0.557154, 0.57, 0.582744, 0.595355,
                     0.607802, 0.620051, 0.632069, 0.64382, 0.655269, 0.666379, 0.677112, 0.687431, 0.6973, 0.70668,
                     0.715537, 0.723834, 0.731538, 0.738617, 0.745039, 0.750777, 0.755804, 0.760099, 0.763641, 0.766413,
                     0.768403, 0.7696, 0.77, 0.7696, 0.768403, 0.766413, 0.763641, 0.760099, 0.755804, 0.750777,
                     0.745039, 0.738617, 0.731538]
        F8b = Fabian2001(preset='Leonhard8b', temp_steps=11)

        npt.assert_almost_equal(F8b.betas, L8b_betas, decimal=5)

    #
    def test_lambda1(self):
        L8b_lambdas1 = [0.400005, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
                        0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
                        0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
                        0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
                        0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
                        0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]
        L8b = Fabian2001(preset='Leonhard8b', temp_steps=11)
        npt.assert_almost_equal(L8b.l1, L8b_lambdas1, decimal=5)

    def test_lambda2(self):
        L8b_lambdas2 = [0.001005, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                        0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                        0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                        0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                        0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                        0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                        0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                        0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001]
        L8b = Fabian2001(preset='Leonhard8b', temp_steps=11)
        npt.assert_almost_equal(L8b.l2, L8b_lambdas2, decimal=5)

    def test_gamma(self):
        L8b_gammas = [0.00011893, 0.00020544, 0.000297612, 0.000395844, 0.000500569, 0.000612243, 0.000731352,
                      0.000858411, 0.000993964, 0.00113859, 0.0012929, 0.00145753, 0.00163317, 0.00182053, 0.00202038,
                      0.00223351, 0.00246078, 0.00270306, 0.00296131, 0.0032365, 0.00352969, 0.00384198, 0.00417452,
                      0.00452854, 0.00490533, 0.00530625, 0.00573273, 0.00618629, 0.0066685, 0.00718105, 0.00772571,
                      0.00830433, 0.00891888, 0.00957141, 0.0102641, 0.0109993, 0.0117793, 0.0126067, 0.0134842,
                      0.0144146, 0.0154008, 0.0164459, 0.0175532, 0.0187262, 0.0199684, 0.0212835, 0.0226756, 0.0241488,
                      0.0257075, 0.0273561, 0.0290996, 0.0309429, 0.0328912, 0.0349499, 0.0371249, 0.0394221, 0.0418478,
                      0.0444084, 0.0471109, 0.0499623, 0.0529701, 0.0561422, 0.0594867, 0.0630122, 0.0667278, 0.0706429,
                      0.0747675, 0.0791123, 0.0836884, 0.0885078, 0.0935833, 0.0989287, 0.104559, 0.110489, 0.116739,
                      0.123325, 0.130271, 0.1376, 0.145338, 0.153517, 0.162169, 0.171334, 0.181058, 0.191393, 0.202399,
                      0.21415, 0.226729, 0.240238, 0.254799, 0.270558, 0.287695, 0.306431, 0.327039, 0.349866, 0.375349,
                      0.404057, 0.436735, 0.474379, 0.518354, 0.570576, 0.63382]

        L8b = Fabian2001(preset='Leonhard8b', temp_steps=11)
        npt.assert_almost_equal(L8b.gammas, L8b_gammas, decimal=5)

    def test_get_chi(self):
        L8b = Fabian2001(preset='Leonhard8b', temp_steps=11)
        L8b_chi = [1.20447E-7, 1.45738E-7, 1.7992E-7, 2.27703E-7, 2.97394E-7, 4.04756E-7, 5.82778E-7, 9.10386E-7,
                   # for tau_b = 0.11
                   1.61768E-6, 3.63473E-6, 0.000014431, 0.00145753, 0.00145662, 0.00145389, 0.00144938, 0.0014431,
                   0.0014351, 0.00142546, 0.00141422, 0.00140147, 0.0013873, 0.00137179, 0.00135505, 0.00133718,
                   0.00131828, 0.00129847, 0.00127783, 0.00125649, 0.00123454, 0.00121208, 0.00118921, 0.00116602,
                   0.0011426, 0.00111902, 0.00109537, 0.00107171, 0.00104811, 0.00102462, 0.00100131, 0.000978207,
                   0.000955365, 0.000932818, 0.000910599, 0.000888737, 0.000867254, 0.00084617, 0.000825503,
                   0.000805264, 0.000785465, 0.000766112, 0.000747211, 0.000728764, 0.000710773, 0.000693236,
                   0.000676151, 0.000659515, 0.000643323, 0.000627569, 0.000612246, 0.000597348, 0.000582865,
                   0.000568791, 0.000555117, 0.000541832, 0.000528928, 0.000516396, 0.000504226, 0.000492408,
                   0.000480933, 0.000469791, 0.000458974, 0.00044847, 0.000438272, 0.00042837, 0.000418755, 0.000409418,
                   0.000400351, 0.000391545, 0.000382993, 0.000374686, 0.000366616, 0.000358776, 0.000351159,
                   0.000343757, 0.000336563, 0.000329571, 0.000322774, 0.000316167, 0.000309742, 0.000303494,
                   0.000297417, 0.000291506, 0.000285755, 0.000280159, 0.000274714, 0.000269414, 0.000264254,
                   0.000259231, 0.00025434, 0.000249577, 0.000244937]

        npt.assert_almost_equal(L8b.get_chi(0.11), L8b_chi, decimal=5)

    # def test_get_H_matrix(self):
    #     self.fail()
    #
    # def test_H(self):
    #     self.fail()

    def test_get_chi_grid(self):

        for name, model in self.models.items():
            print('testing model preset: %s' % name)
            chi_comp = pd.read_csv(os.path.join(RockPy.test_data_path, '%s_Chi.csv' % name), index_col=None,
                                   header=None)
            npt.assert_almost_equal(model.get_chi_grid(), chi_comp.values, decimal=4)

            # #### F4a
            # F4a = Fabian2001(preset='Fabian4a', temp_steps=11)
            #
            # F4a_comp = pd.read_csv(os.path.join(RockPy.test_data_path, 'Fabian2001_4a_Chi.csv'), index_col=None,
            #                        header=None)
            # npt.assert_almost_equal(F4a.get_chi_grid(), F4a_comp.values)
            #
            # #### F5b
            # print('testing F5b')
            # F5b = Fabian2001(preset='Fabian5b', temp_steps=11)
            # F5b_comp = pd.read_csv(os.path.join(RockPy.test_data_path, 'Fabian2001_5b_Chi.csv'), index_col=None,
            #                        header=None)
            # npt.assert_almost_equal(F5b.get_chi_grid(), F5b_comp.values)
            #
            # #### F7a
            # print('testing F7a')
            # F7a = Fabian2001(preset='Fabian7a', temp_steps=11)
            # F7a_comp = pd.read_csv(os.path.join(RockPy.test_data_path, 'Fabian2001_7a_Chi.csv'), index_col=None,
            #                        header=None)
            # npt.assert_almost_equal(F7a.get_chi_grid(), F7a_comp.values, decimal=4)
            #
            # #### L8b
            # print('testing F8b')
            # F8b = Fabian2001(preset='Leonhard8b', temp_steps=11)
            # F8b_comp = pd.read_csv(os.path.join(RockPy.test_data_path, 'Fabian2001_8b_Chi.csv'), index_col=None,
            #                        header=None)
            # npt.assert_almost_equal(F8b.get_chi_grid(), F8b_comp.values, decimal=4)

    # def test_moment(self):
    #     self.fail()
    #
    def test_get_data(self):
        # Comparison to this Mathematica Function (thellier14.m)
        # DeMag[t_, ttail_, stepwidth_]: = Sum[Sum[If[Tub > t & & Tub > (t - stepwidth + ttail) & &
        #                                             Tb <= (t - stepwidth), (ExtFieldVec + Alpha * ms[x]) *
        #                                             KappaFunc[Tb,Tub],
        #                                             If[(Tub > t & & Tb > (t - stepwidth)) | | (t == 0), (ExtFieldVec +
        #                                             Alpha * ms[x]) * KappaFunc[Tb,Tub],
        #                                             If[Tub > t & & Tub <= (t - stepwidth + ttail) & & Tb <= (t - stepwidth),
        #                                             LabFieldVec * (KappaFunc[Tb, Tub]), {0, 0, 0}]]],
        #                                             {Tub, 0, 1,0.01}], {Tb, 0, 1, 0.01}] c/o Roman Leonhard 2017
        demag_data = {
            'Fabian4a': [[0., 0., 93.5669], [0., 0., 89.7519], [0., 0., 85.0543], [0., 0., 79.345], [0., 0., 72.3988],
                         [0., 0., 63.9462], [0., 0., 53.7382], [0., 0., 41.6709], [0., 0., 27.9777], [0., 0., 13.4073],
                         [0, 0, 0]],
            "Fabian4b": [[0., 0., 92.9013], [0., 0., 78.8437], [0., 0., 64.3617], [0., 0., 50.8228], [0., 0., 38.9446],
                         [0., 0., 28.923], [0., 0., 20.6334], [0., 0., 13.8207], [0., 0., 8.21627], [0., 0., 3.59503],
                         [0, 0, 0]],
            'Fabian4c': [[0., 0., 131.342], [0., 0., 122.351], [0., 0., 110.891], [0., 0., 97.109], [0., 0., 81.6015],
                         [0., 0., 65.1518], [0., 0., 48.7317], [0., 0., 33.2976], [0., 0., 19.5975], [0., 0., 8.2114],
                         [0, 0, 0]],
            'Fabian5a': [[0., 0., 102.768], [0., 0., 90.1853], [0., 0., 75.8836], [0., 0., 61.4005], [0., 0., 47.9395],
                         [0., 0., 36.0262], [0., 0., 25.7867], [0., 0., 17.1436], [0., 0., 9.96022], [0., 0., 4.17093],
                         [0, 0, 0]],
            'Fabian5b': [[0., 0., 103.548], [0., 0., 98.9675], [0., 0., 93.1154], [0., 0., 85.8375], [0., 0., 77.0579],
                         [0., 0., 66.6415], [0., 0., 54.5169], [0., 0., 40.8225], [0., 0., 26.1027], [0., 0., 11.6126],
                         [0, 0, 0]],
            'Fabian5c': [[0., 0., 83.6944], [0., 0., 77.9972], [0., 0., 71.7805], [0., 0., 64.5688], [0., 0., 56.4085],
                         [0., 0., 47.4057], [0., 0., 37.7497], [0., 0., 27.7381], [0., 0., 17.7852], [0., 0., 8.38413],
                         [0, 0, 0]],
            'Fabian5d': [[0., 0., 83.3248], [0., 0., 74.1259], [0., 0., 64.7276], [0., 0., 54.821], [0., 0., 44.8884],
                         [0., 0., 35.3296], [0., 0., 26.4306], [0., 0., 18.3733], [0., 0., 11.2609], [0., 0., 5.13863],
                         [0, 0, 0]],
            'Fabian5e': [[0., 0., 86.3828], [0., 0., 78.304], [0., 0., 69.9986], [0., 0., 60.9804], [0., 0., 51.4854],
                         [0., 0., 41.7668], [0., 0., 32.0931], [0., 0., 22.7503], [0., 0., 14.0386], [0., 0., 6.29268],
                         [0, 0, 0]],
            'Fabian5f': [[0., 0., 86.5109], [0., 0., 79.5736], [0., 0., 71.77], [0., 0., 63.0114], [0., 0., 53.6262],
                         [0., 0., 43.9164], [0., 0., 34.1705], [0., 0., 24.6602], [0., 0., 15.6426], [0., 0., 7.3569],
                         [0, 0, 0]],
            'Fabian6a': [[0., 0., 27.5724], [0., 0., 23.1507], [0., 0., 18.9578], [0., 0., 14.9769], [0., 0., 11.4563],
                         [0., 0., 8.48364], [0., 0., 6.03466], [0., 0., 4.03722], [0., 0., 2.41108], [0., 0., 1.08491],
                         [0, 0, 0]],
            'Fabian6b': [[0., 0., 39.3366], [0., 0., 36.4028], [0., 0., 33.0661], [0., 0., 29.0462], [0., 0., 24.4184],
                         [0., 0., 19.4287], [0., 0., 14.4576], [0., 0., 9.87782], [0., 0., 5.91905], [0., 0., 2.64299],
                         [0, 0, 0]],
            'Fabian6c': [[0., 0., 27.9069], [0., 0., 26.6902], [0., 0., 25.3242], [0., 0., 23.6482], [0., 0., 21.5882],
                         [0., 0., 19.0621], [0., 0., 15.9988], [0., 0., 12.3814], [0., 0., 8.31271], [0., 0., 4.06071],
                         [0, 0, 0]],
            'Fabian7a': [[0., 0., 37.4457], [0., 0., 31.777], [0., 0., 26.6844], [0., 0., 21.7002], [0., 0., 16.9111],
                         [0., 0., 12.4334], [0., 0., 8.40929], [0., 0., 5.00042], [0., 0., 2.37411], [0., 0., 0.677429],
                         [0, 0, 0]],
            'Fabian7b': [[0., 0., 44.2049], [0., 0., 43.3988], [0., 0., 41.5457], [0., 0., 38.6578], [0., 0., 34.8346],
                         [0., 0., 30.2111], [0., 0., 24.933], [0., 0., 19.1422], [0., 0., 12.9704], [0., 0., 6.54119],
                         [0, 0, 0]],
            'Leonhard2a': [[0., 0., 37.256], [0., 0., 36.6924], [0., 0., 36.0061], [0., 0., 35.1096], [0., 0., 33.8949],
                           [0., 0., 32.1719], [0., 0., 29.5879], [0., 0., 25.4771], [0., 0., 18.7896],
                           [0., 0., 9.28286], [0, 0, 0]],
            'Leonhard2b': [[0., 0., 107.48], [0., 0., 103.092], [0., 0., 97.3754], [0., 0., 90.3017], [0., 0., 81.7169],
                           [0., 0., 71.3887], [0., 0., 59.1279], [0., 0., 44.9409], [0., 0., 29.2466], [0., 0., 13.177],
                           [0, 0, 0]],
            'Leonhard2c': [[0., 0., 83.6944], [0., 0., 77.9972], [0., 0., 71.7805], [0., 0., 64.5688],
                           [0., 0., 56.4085], [0., 0., 47.4057], [0., 0., 37.7497], [0., 0., 27.7381],
                           [0., 0., 17.7852], [0., 0., 8.38413], [0, 0, 0]],
            'Leonhard8a': [[0., 0., 40.4358], [0., 0., 35.9984], [0., 0., 31.5836], [0., 0., 26.8126],
                           [0., 0., 21.7586], [0., 0., 16.5754], [0., 0., 11.5156], [0., 0., 6.93268],
                           [0., 0., 3.24737], [0., 0., 0.857229], [0, 0, 0]],
            'Leonhard8b': [[0., 0., 134.656], [0., 0., 134.626], [0., 0., 134.445], [0., 0., 133.887],
                           [0., 0., 132.545], [0., 0., 129.702], [0., 0., 124.1], [0., 0., 113.589], [0., 0., 94.5563],
                           [0., 0., 60.8517], [0, 0, 0]]
        }

        remag_data = {'Fabian4a': [[0., 0., 93.5669], [0., 0., 93.0487], [0., 0., 92.8199], [0., 0., 92.5992],
                                     [0., 0., 92.3727], [0., 0., 92.1462], [0., 0., 91.9434], [0., 0., 91.8111],
                                     [0., 0., 91.8195], [0., 0., 92.0745], [0., 0., 93.5669]]}

        for name, model in self.models.items():
            print('testing demag data for model %s' % name)
            data = model.get_data()
            demag = data[np.in1d(data['LT_code'], ['LT-NO', 'LT-T-Z'])]
            remag = data[np.in1d(data['LT_code'], ['LT-NO', 'LT-T-I'])]

            npt.assert_almost_equal(demag[['x', 'y', 'z']].astype(float), demag_data[name], decimal=3, verbose=True)

            if name in remag_data:
                npt.assert_almost_equal(remag[['x', 'y', 'z']].astype(float), remag_data[name], decimal=3, verbose=True)


